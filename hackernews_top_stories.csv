,by,descendants,id,kids,score,time,title,type,url,text
0,ckcheng,8,39913117,[39913129],35,1712112395,"Why will my device lose access to Libby & OverDrive April 15, 2024?",story,https://help.overdrive.com/en-us/2271.htm,
1,Stratoscope,1,39913505,[39913599],5,1712117110,The Rise and Fall of 3M's Floppy Disk,story,https://spectrum.ieee.org/3m-floppy,
2,seanisom,99,39907845,"[39909480, 39911269, 39911786, 39910298, 39910485, 39910986, 39909113, 39908647, 39910205, 39911893, 39908679, 39910497, 39909857, 39911082, 39908453, 39909710, 39909740, 39912774, 39908458, 39912091, 39909391, 39911175, 39911556, 39909232]",299,1712076272,3D + 2D: Testing out my cross-platform WASM graphics engine,story,,"I used to work at Adobe on the infrastructure powering big applications like Photoshop and  Acrobat. One of our worst headaches was making these really powerful codebases work on desktop, web, mobile, and the cloud without having to completely rewrite them.  For example, to get Lightroom and Photoshop working on the web we took a winding path through JavaScript, Google’s PNaCl, asm.js, and finally WebAssembly, all while having to rethink our GPU architecture around these devices. We even had to get single-threaded builds working and rebuild the UI around Web Components. Today the web builds work great, but it was a decade-long journey to get there!<p>The graphics stack continues to be one of the biggest bottlenecks in portability. One day I realized that WebAssembly (Wasm) actually held the solution to the madness. It’s runnable anywhere, embeddable into anything, and performant enough for real-time graphics. So I quit my job and dove into the adventure of creating a portable, embeddable WASM-based graphics framework from the ground up: high-level enough for app developers to easily make whatever graphics they want, and low-level enough to take full advantage of the GPU and everything else needed for a high-performance application.<p>I call it Renderlet to emphasize the embeddable aspect — you can make self-contained graphics modules that do just what you want, connect them together, and make them run <i>on</i> anything or <i>in</i> anything with trivial interop.<p>If you think of how Unity made it easy for devs to build cross-platform games, the idea is to do the same thing for all visual applications.<p>Somewhere along the way I got into YC as a solo founder (!) but mostly I’ve been heads-down building this thing for the last 6 months. It’s not <i>quite</i> ready for an open alpha release, but it’s close—close enough that I’m ready to write about it, show it off, and start getting feedback. This is the thing I dreamed of as an application developer, and I want to know what you think!<p>When Rive open-sourced their 2D vector engine and made a splash on HN a couple weeks ago (<a href=""https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=39766893"">https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=39766893</a>), I was intrigued. Rive’s renderer is built as a higher-level 2D API similar to SVG, whereas the Wander renderer (the open-source runtime part of Renderlet) exposes a lower-level 3D API over the GPU. Could Renderlet use its GPU backend to run the Rive Renderer library, enabling any 3D app to have a 2D vector backend? Yes it can - I implemented it!<p>You can see it working here: <a href=""https:&#x2F;&#x2F;vimeo.com&#x2F;929416955"" rel=""nofollow"">https:&#x2F;&#x2F;vimeo.com&#x2F;929416955</a> and there’s a deep technical dive here: <a href=""https:&#x2F;&#x2F;github.com&#x2F;renderlet&#x2F;wander&#x2F;wiki&#x2F;Using-renderlet-with-rive%E2%80%90renderer"">https:&#x2F;&#x2F;github.com&#x2F;renderlet&#x2F;wander&#x2F;wiki&#x2F;Using-renderlet-wit...</a>. The code for my runtime Wasm Renderer (a.k.a. Wander) is here: <a href=""https:&#x2F;&#x2F;github.com&#x2F;renderlet&#x2F;wander"">https:&#x2F;&#x2F;github.com&#x2F;renderlet&#x2F;wander</a>.<p>I’ll come back and do a proper Show HN or Launch HN when the compiler is ready for anyone to use and I have the integration working on all platforms, but I hope this is interesting enough to take a look at now. I want to hear what you think of this!"
3,smusamashah,98,39907876,"[39910457, 39909110, 39908555, 39908858, 39911864, 39908702, 39909284, 39911738, 39908955, 39909884, 39909159]",361,1712076392,CityGaussian: Real-time high-quality large-scale scene rendering with Gaussians,story,https://dekuliutesla.github.io/citygs/,
4,iyeaton,7,39912771,"[39913200, 39913404, 39913448]",24,1712108551,The Threat of Discontinued Software (2021),story,https://almy.us/softwaredeath.html,
5,mfiguiere,8,39911961,"[39912871, 39913503, 39912820]",46,1712100397,ReALM: Reference Resolution as Language Modeling,story,https://arxiv.org/abs/2403.20329,
6,unixispower,72,39910119,"[39913593, 39911667, 39913156, 39910476, 39911949, 39912872, 39910906, 39913341, 39911091, 39910407, 39913219, 39913310, 39910874, 39910410, 39912355, 39910378, 39910318, 39911544, 39911803, 39911127]",243,1712087354,Anonymous public voicemail inbox,story,https://afterthebeep.tel/,
7,achristmascarl,73,39909123,"[39910175, 39910450, 39913496, 39910118, 39910676, 39911460, 39913395, 39912391, 39910100, 39912848, 39910433, 39911098, 39910912, 39910335, 39913070, 39910638, 39910928, 39910979, 39910049, 39911914, 39910718, 39912875, 39911117, 39911828, 39910422]",133,1712082215,A rudimentary simulation of the three-body problem,story,https://github.com/achristmascarl/three_body,
8,nanna,68,39903738,"[39911927, 39908005, 39910325, 39908361, 39908536, 39908938, 39910200, 39908633, 39908040, 39909543, 39908944, 39910046, 39908714, 39907999, 39908630, 39909736, 39909201]",202,1712049335,Los Alamos Chess,story,https://en.wikipedia.org/wiki/Los_Alamos_chess,
9,zdw,11,39889558,"[39913013, 39913005, 39911885, 39911650, 39912037, 39912071, 39911965, 39911919, 39911385]",147,1711930971,Ross Anderson,story,https://www.schneier.com/blog/archives/2024/03/ross-anderson.html,
